#	Copyright (C) 2013 Marco Scannadinari
#
#	This file is part of btcwatch.
#
#	btcwatch is free software: you can redistribute it and/or modify
#	it under the terms of the GNU Lesser General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	btcwatch is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU Lesser General Public License for more details.
#
#	You should have received a copy of the GNU Lesser General Public License
#	along with btcwatch.  If not, see <http://www.gnu.org/licenses/>.

CC="gcc";
CFLAGS="-Wall -Wextra -Wpedantic -std=gnu99 -march=native -O3";

import sys;
import os;

if not GetOption("clean"):  # !(scons -c)
	def sprint(string):
		print("scons: " + string);

	def err(err):
		sys.stderr.write("scons: error: " + err + "\n");
		exit(1);

	def header_err(header):
		sys.stderr.write("scons: error: header file ");
		sys.stderr.write(header);
		sys.stderr.write(" not found\n");
		exit(1);

	def lib_err(lib):
		sys.stderr.write("scons: error: library ");
		sys.stderr.write(lib);
		sys.stderr.write(" not found\n");
		exit(1);

env = Environment(
	CC = CC,
	CCFLAGS = CFLAGS
);

if not GetOption("clean"):
	sprint("CC: " + CC);
	sprint("CFLAGS: " + CFLAGS);

	conf = Configure(env);

	# check C compiler

	if not conf.CheckCC():
		err("working C compiler not found");
		sys.exit(1);

	# check headers

	if not conf.CheckHeader("curl/curl.h"):
		header_err("curl.h");

	if not conf.CheckHeader("jansson.h"):
		header_err("jansson.h");

	if not conf.CheckHeader("stdbool.h"):
		header_err("stdbool.h");

	if not conf.CheckHeader("stdio.h"):
		header_err("stdio.h");

	if not conf.CheckHeader("stdlib.h"):
		header_err("stdlib.h");

	if not conf.CheckHeader("string.h"):
		header_err("string.h");

	# check libs

	if not conf.CheckLib("curl"):
		lib_err("curl");

	if not conf.CheckLib("jansson"):
		lib_err("jansson");

	if not conf.CheckLib("libc"):
		lib_err("libc");

	env = conf.Finish();

	# process flags needed by libraries

	env.ParseConfig("pkg-config libcurl --cflags --libs");
	env.ParseConfig("pkg-config jansson --cflags --libs");

	# append user-defined environment variables

	if "CC" in os.environ:
		sprint("using custom compiler: \"" + os.environ["CC"] + "\"");
		env.Replace(CC = os.environ["CC"]);

	if "CFLAGS" in os.environ:
		sprint("appending custom CFLAGS: \"" + os.environ["CFLAGS"] + "\"");
		env.Append(CFLAGS = os.environ["CFLAGS"]);

	if "LDFLAGS" in os.environ:
		sprint("appending custom LDFLAGS: \"" + os.environ["LDFLAGS"] + "\"");
		env.Append(LDFLAGS = os.environ["LDFLAGS"]);

btcapi = env.Library("lib/btcapi.c");
cmdlineutils = env.Library("lib/cmdlineutils.c");

btcwatch = env.Program(
	source = "src/main.c",
	target = "btcwatch",
	LIBS = ["btcapi", "cmdlineutils", "curl", "jansson"],
	LIBPATH = "lib/"
);

if not GetOption("clean"):
	env.Alias("install", env.Install("/usr/bin/", btcwatch));
